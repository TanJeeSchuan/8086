Microsoft (R) Macro Assembler Version 5.00                  9/7/23 10:17:08
                                                             Page     1-1


       1				.model small 
       2 0064				.stack 100 
       3 0000				.data 
       4				 
       5 0000  0019			num1    DW  0025d           ;51.5278d  
					   whole number    ;decimal number 要a
					llocate 两个 WORD 来store 
       6 0002  05DC			        DW  1500d           ;          
					   mantissa   
       7				 
       8 0004  0002			num2    DW  0002d           ;45.8984d 
       9 0006  01F4			        DW  0500d            
      10				 
      11 0008  000A[			buffer  DW  10 DUP(0)       ;10 Bytes o
					f value 0 
      12	   0000			
      13			 ]	
      14				
      15				 
      16 = 000A				newline EQU 10 
      17 = 002E				decimal EQU 46d 
      18				 
      19 0000				.code 
      20 0000				main proc 
      21				 
      22 0000  B8 ---- R		mov ax,@data 
      23 0003  8E D8			mov ds,ax 
      24 0005  8E C0			mov es,ax 
      25 0007  B8 4C00			mov ax,4c00h 
      26				 
      27				; start 
      28				 
      29 000A  E8 014C R		call print_n            ;print newline 
      30				 
      31 000D  8D 36 0000 R		lea si,num1             ;load address o
					f num1 into si 
      32 0011  E8 010D R		call print_dec 
      33				 
      34 0014  E8 014C R		call print_n 
      35 0017  E8 014C R		call print_n 
      36				 
      37 001A  8D 36 0004 R		lea si,num2 
      38 001E  E8 010D R		call print_dec 
      39				 
      40 0021  E8 014C R		call print_n 
      41 0024  E8 014C R		call print_n 
      42				 
      43				;load addresses 
      44 0027  8D 36 0000 R		lea si,num1 
      45 002B  8D 3E 0004 R		lea di,num2 
      46				 
      47				; call dec_add              ;add functi
					on 
      48				; call dec_sub              ;sub functi
Microsoft (R) Macro Assembler Version 5.00                  9/7/23 10:17:08
                                                             Page     1-2


					on 
      49 002F  E8 0060 R		call dec_mul 
      50				 
      51 0032  8D 36 0000 R		lea si,num1 
      52 0036  E8 010D R		call print_dec 
      53				 
      54 0039  E8 014C R		call print_n 
      55				 
      56				; mov  ax,[buffer+8] 
      57				; call print_num 
      58				 
      59				;end 
      60				 
      61 003C  B4 4C			mov ah,4ch 
      62 003E  CD 21			int 21h 
      63				 
      64 0040				endProgram: 
      65 0040  B2 54			mov dl,"T" 
      66 0042  E8 0145 R		call print_char 
      67 0045  B4 4C			mov ah,4ch 
      68 0047  CD 21			int 21h 
      69				 
      70 0049				NORM_DEC        PROC                   
					                     ;normalise decimal
					 representation in si 
      71 0049  8B 44 02			                        mov     ax,[si 
					+ 2]                 ;get the mantissa 
					of number 
      72				 
      73 004C  3D 2710			                        cmp ax,2710h   
					                     ;check if mantissa
					 exceeds 10000 
      74 004F  73 03			                        jae dec_mantiss
					a_OF                 ;if over/equal 100
					00 
      75 0051  EB 0C 90			                        jmp no_mantissa
					_OF 
      76				 
      77 0054				        dec_mantissa_OF: 
      78 0054  8B 1C			                        mov     bx,[si]
					                     ; 
      79 0056  43			                        inc     bx     
					                     ;add 1 to whole nu
					mber 
      80 0057  89 1C			                        mov     [si],bx
					 
      81				                         
      82 0059  2D 2710			                        sub     ax,2710
					h 
      83 005C  89 44 02			                        mov     [si+2],
					ax 
      84				 
      85 005F				        no_mantissa_OF: 
      86 005F  C3			                        ret 
Microsoft (R) Macro Assembler Version 5.00                  9/7/23 10:17:08
                                                             Page     1-3


      87				 
      88				 
      89 0060				NORM_DEC        ENDP 
      90				 
      91 0060				DEC_MUL         PROC                   
					                     ;performs multipli
					cation from si and di, output in si 
      92 0060  33 C0			                        xor     ax,ax 
      93 0062  33 DB			                        xor     bx,bx 
      94 0064  33 C9			                        xor     cx,cx 
      95 0066  33 D2			                        xor     dx,dx 
      96				 
      97 0068  8B 44 02			                        mov     ax,[si+
					2] 
      98 006B  8B 5D 02			                        mov     bx,[di+
					2] 
      99				 
     100 006E  F7 E3			                        mul     bx     
					                     ;dx will be carry,
					 ax is (w(0,1,2) + previous_carry + ax*
					bx mod FFFFh) 
     101 0070  50			                        push    ax     
					                     ;w0 
     102 0071  8B CA			                        mov     cx,dx  
					                     ;store carry at cx
					 
     103				 
     104 0073  33 D2			                        xor     dx,dx 
     105 0075  8B 04			                        mov     ax,[si]
					 
     106				 
     107 0077  F7 E3			                        mul     bx 
     108 0079  03 C1			                        add     ax,cx  
					                     ;ax + carry 
     109 007B  50			                        push    ax     
					                     ;w1 
     110 007C  8B CA			                        mov     cx,dx  
					                     ;store carry at cx
					 
     111				 
     112 007E  33 D2			                        xor     dx,dx 
     113 0080  8B 44 02			                        mov     ax,[si+
					2] 
     114 0083  8B 1D			                        mov     bx,[di]
					 
     115				 
     116 0085  F7 E3			                        mul     bx 
     117				 
     118 0087  03 C1			                        add     ax,cx  
					                     ;add carry 
     119 0089  59			                        pop     cx     
					                     ;get w1 
     120 008A  03 C1			                        add     ax,cx  
					                     ;w1 + ax*bx + carr
Microsoft (R) Macro Assembler Version 5.00                  9/7/23 10:17:08
                                                             Page     1-4


					y 
     121				 
     122 008C  50			                        push    ax     
					                     ;w1 
     123 008D  8B CA			                        mov     cx,dx  
					                     ;carry as cx 
     124				 
     125 008F  33 C0			                        xor     ax,ax 
     126 0091  33 D2			                        xor     dx,dx 
     127 0093  8B 04			                        mov     ax,[si]
					 
     128 0095  8B 1D			                        mov     bx,[di]
					 
     129				                         
     130 0097  F7 E3			                        mul     bx 
     131				 
     132 0099  50			                        push    ax 
     133 009A  8B C1			                        mov     ax,cx 
     134 009C  E8 0121 R		                        call    PRINT_N
					UM 
     135 009F  E8 014C R		                        call    print_n
					 
     136 00A2  58			                        pop     ax 
     137				 
     138 00A3  03 C1			                        add     ax,cx 
     139 00A5  50			                        push    ax     
					                     ;w2 
     140				 
     141 00A6  58			                        pop     ax     
					                     ;get w2 
     142 00A7  E8 0184 R		                        call    PRINT_H
					EX 
     143 00AA  E8 014C R		                        call    print_n
					 
     144 00AD  89 04			                        mov     [si],ax
					 
     145				 
     146 00AF  58			                        pop     ax     
					                     ;get w1 
     147 00B0  E8 0184 R		                        call    PRINT_H
					EX 
     148 00B3  E8 014C R		                        call    print_n
					 
     149 00B6  89 44 02			                        mov     [si+2],
					ax 
     150				 
     151 00B9  58			                        pop     ax     
					                     ;throw away smalle
					st digit partS 
     152 00BA  E8 0184 R		                        call    PRINT_H
					EX 
     153 00BD  E8 014C R		                        call    print_n
					 
     154				 
Microsoft (R) Macro Assembler Version 5.00                  9/7/23 10:17:08
                                                             Page     1-5


     155 00C0  E8 0049 R		                        call    NORM_DE
					C 
     156				                         
     157 00C3  C3			                        ret 
     158				 
     159				                         
     160 00C4				DEC_MUL         ENDP 
     161				 
     162 00C4				DEC_ADD         PROC                   
					                     ;performs decimal 
					addition from si and di, modifies value
					 in si 
     163				                        ;load mantissa 
     164 00C4  8B 44 02			                        mov ax, [si + 2
					]                    ;一个word 2 byte
					，+2 来拿第二个word 
     165 00C7  8B 5D 02			                        mov bx, [di + 2
					] 
     166				 
     167 00CA  03 C3			                        add ax,bx      
					                     ;add mantissa 
     168				 
     169 00CC  3D 2710			                        cmp ax,2710h   
					                     ;check if mantissa
					 exceeds 10000 
     170 00CF  73 03			                        jae over_10000 
					                     ;if mantissa >= 10
					000 
     171				 
     172 00D1  EB 05 90			                        jmp no_overflow
					                     ;if not exceed 100
					00 jump over over_10000: function 
     173				 
     174 00D4				                        over_10000: 
     175 00D4  2D 2710			                        sub ax,2710h   
					                     ;subtract 10000 fr
					om mantissa 
     176 00D7  F9			                        STC            
					                     ;set carry flag fo
					r whole number addition 
     177				 
     178 00D8				                        no_overflow: 
     179 00D8  B9 0000			                        mov cx,0000h   
					                     ; 
     180 00DB  89 4C 02			                        mov [si + 2],cx
					                     ;set [si + 2] to z
					ero 
     181				 
     182 00DE  89 44 02			                        mov [si + 2],ax
					                     ;load calculated m
					antissa 
     183				 
     184				                        ;load whole num
					ber 
Microsoft (R) Macro Assembler Version 5.00                  9/7/23 10:17:08
                                                             Page     1-6


     185 00E1  8B 04			                        mov ax, [si] 
     186 00E3  8B 1D			                        mov bx, [di] 
     187				 
     188 00E5  13 C3			                        adc ax,bx      
					                     ;add with carry 
     189 00E7  89 04			                        mov [si],ax    
					                     ;load into si 
     190				 
     191 00E9  C3			                        ret 
     192 00EA				DEC_ADD         ENDP 
     193				 
     194 00EA				DEC_SUB         PROC                   
					                     ;performs decimal 
					addition from si and di, modifies value
					 in si 
     195 00EA  8B 44 02			                        mov ax,[si + 2]
					                     ;load mantissa val
					ues in address 
     196 00ED  8B 5D 02			                        mov bx,[di + 2]
					 
     197				 
     198 00F0  2B C3			                        sub ax,bx      
					                     ;subtract mantissa
					 
     199				 
     200 00F2  72 03			                        jc sub_overflow
					                     ;if carry flag set
					 (有进位) (eng???) jump to sub_overf
					low 
     201				 
     202 00F4  EB 0B 90			                        jmp sub_no_over
					flow 
     203 00F7				            sub_overflow: 
     204 00F7  F7 D8			                                neg ax 
					                     ;negate ax, revers
					e two's complement 
     205 00F9  B9 2710			                                mov cx,
					10000d               ;prepare for subst
					raction 
     206 00FC  2B C8			                                sub cx,
					ax                   ;10000 subtract ax
					, to find the value of the ax in the li
					mit of 10000 
     207 00FE  8B C1			                                mov ax,
					cx 
     208 0100  F9			                                STC    
					                     ;set carry flag fo
					r whole number subtraction 
     209				 
     210 0101				            sub_no_overflow: 
     211 0101  89 44 02			                        mov [si+2],ax  
					                     ;load mantisssa re
					sult in ax to si mantissa part 
     212				 
Microsoft (R) Macro Assembler Version 5.00                  9/7/23 10:17:08
                                                             Page     1-7


     213 0104  8B 04			                        mov ax,[si]    
					                     ;load whole number
					s in memory to addresses 
     214 0106  8B 1D			                        mov bx,[di] 
     215				 
     216 0108  1B C3			                        sbb ax,bx      
					                     ;subtract with car
					ry 
     217				 
     218 010A  89 04			                        mov [si],ax    
					                     ;load whole number
					 result in ax to si whole number part 
     219				 
     220 010C  C3			                        ret 
     221 010D				DEC_SUB         ENDP 
     222				 
     223 010D				PRINT_DEC       PROC                   
					                     ;print decimal fro
					m si 
     224 010D  B8 0000			                        mov     ax, 000
					0h                   ;clean ax register
					 
     225 0110  8B 04			                        mov     ax, [si
					]                    ;load whole number
					 
     226 0112  E8 0154 R		                        call    print_n
					um_leading_zero      ;print whole numbe
					r 
     227				 
     228 0115  B2 2E			                        mov     dl, dec
					imal                 ;print decimal cha
					racter 
     229 0117  E8 0145 R		                        call    print_c
					har 
     230				 
     231 011A  8B 44 02			                        mov     ax, [si
					 + 2]                ;load mantissa 
     232 011D  E8 0154 R		                        call    print_n
					um_leading_zero      ;print mantissa 
     233				 
     234 0120  C3			                        ret 
     235 0121				PRINT_DEC       ENDP 
     236				 
     237 0121				PRINT_NUM       PROC                   
					                     ;print from ax    
					          这个没有用到 
     238 0121  50			                        push    ax     
					                     ;preserves origina
					l register values 
     239 0122  53			                        push    bx 
     240 0123  51			                        push    cx 
     241 0124  52			                        push    dx 
     242 0125  BB 000A			                        mov     bx,000A
					h         
Microsoft (R) Macro Assembler Version 5.00                  9/7/23 10:17:08
                                                             Page     1-8


     243 0128  B9 0000			                        mov     cx,0000
					h 
     244 012B				            Divloop: 
     245 012B  BA 0000			                        mov     dx,0000
					h 
     246 012E  F7 F3			                        div     bx 
     247 0130  52			                        push    dx 
     248 0131  41			                        inc     cx 
     249 0132  85 C0			                        test    ax,ax 
     250 0134  75 F5			                        jnz     Divloop
					 
     251				 
     252 0136  B4 02			                        mov ah,02h     
					                     ;setup for print 
     253				 
     254 0138				            IntPrint:    
     255 0138  5A			                        pop     dx 
     256 0139  83 C2 30			                        add     dx,48d 
     257 013C  CD 21			                        int     21h 
     258 013E  E2 F8			                        loop    IntPrin
					t 
     259				 
     260 0140  5A			                        pop dx         
					                     ;restore original 
					ax value 
     261 0141  59			                        pop cx 
     262 0142  5B			                        pop bx 
     263 0143  58			                        pop ax 
     264 0144  C3			                        ret 
     265 0145				PRINT_NUM       ENDP 
     266				 
     267 0145				PRINT_CHAR      PROC                   
					                     ;print from dl 
     268 0145  50			                        push ax        
					                      
     269 0146  B4 02			                        mov ah,02h 
     270 0148  CD 21			                        int 21h 
     271 014A  58			                        pop ax 
     272 014B  C3			                        ret 
     273 014C				PRINT_CHAR      ENDP 
     274				 
     275 014C				PRINT_N         PROC                   
					                     ;print newline 
     276 014C  52			                        push dx 
     277 014D  B2 0A			                        mov dl, newline
					 
     278 014F  E8 0145 R		                        call print_char
					 
     279 0152  5A			                        pop dx 
     280 0153  C3			                        ret 
     281 0154				PRINT_N         ENDP 
     282				 
     283 0154				PRINT_NUM_LEADING_ZERO PROC            
					                     ;print from ax wit
Microsoft (R) Macro Assembler Version 5.00                  9/7/23 10:17:08
                                                             Page     1-9


					h 4 places leading zeros. (eg. if ax=00
					21d, function w
     284 0154  50			                            push    ax 
					                     ;preserves origina
					l register values 
     285 0155  53			                            push    bx 
     286 0156  51			                            push    cx 
     287 0157  52			                            push    dx 
     288 0158  BB 000A			                            mov     bx,
					000Ah         
     289 015B  B9 0000			                            mov     cx,
					0000h 
     290 015E				            Divloop_leading_zero: 
     291 015E  BA 0000			                            mov     dx,
					0000h                ;clean dx 
     292 0161  F7 F3			                            div     bx 
					                     ;divide ax by 10 
     293 0163  52			                            push    dx 
					                     ;push remainder to
					 stack 
     294 0164  41			                            inc     cx 
					                     ;increment cx to r
					ecord number of times loop 
     295 0165  85 C0			                            test    ax,
					ax                   ;test the number o
					f ax 
     296 0167  75 F5			                            jnz     Div
					loop_leading_zero    ;if ax is not zero
					 jump to start of loop 
     297				             
     298 0169				            startCheck_leading_zero: 
     299 0169  83 F9 04			                            cmp cx,0004
					h                    ;if cx is below  
     300 016C  7C 0F			                            jl push_zer
					o_leading_zero       ;if cx is below 4 
					jump to function that puts 0 in stack a
					nd increments c
     301				 
     302 016E  B4 02			            mov ah,02h                 
					                     ;setup for print 
     303 0170				            IntPrint_leading_zero:     
					                     ;print data in sta
					ck, number of data is recorded in cx 
     304 0170  5A			                            pop     dx 
     305 0171  83 C2 30			                            add     dx,
					"0" 
     306 0174  CD 21			                            int     21h
					 
     307 0176  E2 C0			                            loop    Int
					Print     
     308				 
     309 0178  5A			            pop dx                     
					                     ;restore original 
					register value 
Microsoft (R) Macro Assembler Version 5.00                  9/7/23 10:17:08
                                                             Page     1-10


     310 0179  59			            pop cx 
     311 017A  5B			            pop bx 
     312 017B  58			            pop ax 
     313 017C  C3			            ret 
     314				 
     315 017D				            push_zero_leading_zero: 
     316 017D  B8 0000			                            mov ax,0h  
					                     ;prepare for push 
     317 0180  50			                            push ax    
					                     ;push 0 to stack 
     318 0181  41			                            inc cx     
					                     ;cx++ 
     319 0182  EB E5			                            jmp startCh
					eck_leading_zero     ;jump to leading z
					ero checker 
     320 0184				PRINT_NUM_LEADING_ZERO ENDP 
     321				 
     322 0184				PRINT_HEX       PROC 
     323 0184  50			                            push    ax 
					                         ;preserves ori
					ginal register values 
     324 0185  53			                            push    bx 
     325 0186  51			                            push    cx 
     326 0187  52			                            push    dx 
     327 0188  BB 0010			                            mov     bx,
					0010h         
     328 018B  B9 0000			                            mov     cx,
					0000h 
     329 018E				                DivloopHex: 
     330 018E  BA 0000			                            mov     dx,
					0000h 
     331 0191  F7 F3			                            div     bx 
     332 0193  52			                            push    dx 
     333 0194  41			                            inc     cx 
     334 0195  85 C0			                            test    ax,
					ax 
     335 0197  75 F5			                            jnz     Div
					loopHex 
     336				 
     337 0199  B4 02			                            mov ah,02h 
					                         ;setup for pri
					nt 
     338				 
     339 019B				                IntPrintHex:    
     340 019B  5A			                            pop     dx 
     341 019C  83 FA 0A			                            cmp     dx,
					10d 
     342 019F  73 0C			                            jae     hex
					Add 
     343				                     
     344 01A1  83 C2 30			                            add     dx,
					48d 
     345				 
     346 01A4				                    endAdd:         
Microsoft (R) Macro Assembler Version 5.00                  9/7/23 10:17:08
                                                             Page     1-11


     347 01A4  CD 21			                            int     21h
					 
     348 01A6  E2 F3			                            loop    Int
					PrintHex 
     349				 
     350 01A8  5A			                            pop dx     
					                         ;restore origi
					nal ax value 
     351 01A9  59			                            pop cx 
     352 01AA  5B			                            pop bx 
     353 01AB  58			                            pop ax 
     354 01AC  C3			                            ret 
     355				 
     356 01AD				                hexAdd: 
     357 01AD  83 C2 37			                            add     dx,
					55d 
     358 01B0  EB F2			                            jmp     end
					Add 
     359				 
     360 01B2				PRINT_HEX       ENDP 
     361				 
     362 01B2				PRINT_BIN       PROC                   
					                     ;print binary from
					 ax 
     363 01B2  50			                            push    ax 
					            ;preserves original registe
					r values 
     364 01B3  53			                            push    bx 
     365 01B4  51			                            push    cx 
     366 01B5  52			                            push    dx 
     367 01B6  BB 0002			                            mov     bx,
					0002h         
     368 01B9  B9 0000			                            mov     cx,
					0000h 
     369 01BC				            DivloopB: 
     370 01BC  BA 0000			                            mov     dx,
					0000h 
     371 01BF  F7 F3			                            div     bx 
     372 01C1  52			                            push    dx 
     373 01C2  41			                            inc     cx 
     374 01C3  85 C0			                            test    ax,
					ax 
     375 01C5  75 F5			                            jnz     Div
					loopB 
     376 01C7  B4 02			            mov ah,02h                 
					         ;setup for print 
     377				 
     378 01C9  BB 0000			            mov bx,0000h 
     379				 
     380 01CC  BB 0010			            mov bx,16d                 
					         ;max number of digits 
     381 01CF  2B D9			            sub bx,cx                  
					         ;number of leading zeros = max
					 digits - number of chars to print 
Microsoft (R) Macro Assembler Version 5.00                  9/7/23 10:17:08
                                                             Page     1-12


     382				 
     383 01D1  B2 30			            mov dl,"0"                 
					         ;prepare for print 
     384				 
     385 01D3  51			            push cx                    
					         ;store cx for later use 
     386 01D4  8B CB			            mov  cx,bx 
     387				 
     388 01D6  85 C9			            test cx,cx                 
					         ;if cx != 0, print 0 for cx nu
					mber of times 
     389 01D8  75 03			            jnz Trailing0B 
     390				 
     391 01DA  EB 05 90			            jmp Trailing0BEnd 
     392				 
     393 01DD  CD 21			            Trailing0B:     int 21h 
     394 01DF  E2 FC			                            loop Traili
					ng0B 
     395				 
     396				 
     397 01E1				            Trailing0BEnd: 
     398 01E1  59			            pop  cx 
     399				 
     400 01E2  5A			            IntPrintB:      pop     dx 
     401 01E3  83 C2 30			                            add     dx,
					48d 
     402 01E6  CD 21			                            int     21h
					 
     403 01E8  E2 F8			                            loop    Int
					PrintB 
     404				 
     405 01EA  5A			            pop dx                     
					         ;restore original ax value 
     406 01EB  59			            pop cx 
     407 01EC  5B			            pop bx 
     408 01ED  58			            pop ax 
     409 01EE  C3			            ret 
     410 01EF				PRINT_BIN       ENDP 
     411				 
     412 01EF				main endp 
     413 01EF				end main 
Microsoft (R) Macro Assembler Version 5.00                  9/7/23 10:17:08
                                                             Symbols-1


Segments and Groups:

                N a m e         	Length	 Align	Combine Class

DGROUP . . . . . . . . . . . . .  	GROUP
  _DATA  . . . . . . . . . . . .  	001C	WORD	PUBLIC	'DATA'
  STACK  . . . . . . . . . . . .  	0064	PARA	STACK	'STACK'
_TEXT  . . . . . . . . . . . . .  	01EF	WORD	PUBLIC	'CODE'

Symbols:            

                N a m e         	Type	 Value	 Attr

BUFFER . . . . . . . . . . . . .  	L WORD	0008	_DATA	Length = 000A

DECIMAL  . . . . . . . . . . . .  	NUMBER	002E	
DEC_ADD  . . . . . . . . . . . .  	N PROC	00C4	_TEXT	Length = 0026
DEC_MANTISSA_OF  . . . . . . . .  	L NEAR	0054	_TEXT
DEC_MUL  . . . . . . . . . . . .  	N PROC	0060	_TEXT	Length = 0064
DEC_SUB  . . . . . . . . . . . .  	N PROC	00EA	_TEXT	Length = 0023
DIVLOOP  . . . . . . . . . . . .  	L NEAR	012B	_TEXT
DIVLOOPB . . . . . . . . . . . .  	L NEAR	01BC	_TEXT
DIVLOOPHEX . . . . . . . . . . .  	L NEAR	018E	_TEXT
DIVLOOP_LEADING_ZERO . . . . . .  	L NEAR	015E	_TEXT

ENDADD . . . . . . . . . . . . .  	L NEAR	01A4	_TEXT
ENDPROGRAM . . . . . . . . . . .  	L NEAR	0040	_TEXT

HEXADD . . . . . . . . . . . . .  	L NEAR	01AD	_TEXT

INTPRINT . . . . . . . . . . . .  	L NEAR	0138	_TEXT
INTPRINTB  . . . . . . . . . . .  	L NEAR	01E2	_TEXT
INTPRINTHEX  . . . . . . . . . .  	L NEAR	019B	_TEXT
INTPRINT_LEADING_ZERO  . . . . .  	L NEAR	0170	_TEXT

MAIN . . . . . . . . . . . . . .  	N PROC	0000	_TEXT	Length = 01EF

NEWLINE  . . . . . . . . . . . .  	NUMBER	000A	
NORM_DEC . . . . . . . . . . . .  	N PROC	0049	_TEXT	Length = 0017
NO_MANTISSA_OF . . . . . . . . .  	L NEAR	005F	_TEXT
NO_OVERFLOW  . . . . . . . . . .  	L NEAR	00D8	_TEXT
NUM1 . . . . . . . . . . . . . .  	L WORD	0000	_DATA
NUM2 . . . . . . . . . . . . . .  	L WORD	0004	_DATA

OVER_10000 . . . . . . . . . . .  	L NEAR	00D4	_TEXT

PRINT_BIN  . . . . . . . . . . .  	N PROC	01B2	_TEXT	Length = 003D
PRINT_CHAR . . . . . . . . . . .  	N PROC	0145	_TEXT	Length = 0007
PRINT_DEC  . . . . . . . . . . .  	N PROC	010D	_TEXT	Length = 0014
PRINT_HEX  . . . . . . . . . . .  	N PROC	0184	_TEXT	Length = 002E
PRINT_N  . . . . . . . . . . . .  	N PROC	014C	_TEXT	Length = 0008
PRINT_NUM  . . . . . . . . . . .  	N PROC	0121	_TEXT	Length = 0024
PRINT_NUM_LEADING_ZERO . . . . .  	N PROC	0154	_TEXT	Length = 0030
PUSH_ZERO_LEADING_ZERO . . . . .  	L NEAR	017D	_TEXT
Microsoft (R) Macro Assembler Version 5.00                  9/7/23 10:17:08
                                                             Symbols-2



STARTCHECK_LEADING_ZERO  . . . .  	L NEAR	0169	_TEXT
SUB_NO_OVERFLOW  . . . . . . . .  	L NEAR	0101	_TEXT
SUB_OVERFLOW . . . . . . . . . .  	L NEAR	00F7	_TEXT

TRAILING0B . . . . . . . . . . .  	L NEAR	01DD	_TEXT
TRAILING0BEND  . . . . . . . . .  	L NEAR	01E1	_TEXT

@CODE  . . . . . . . . . . . . .  	TEXT  _TEXT		
@CODESIZE  . . . . . . . . . . .  	TEXT  0		
@DATASIZE  . . . . . . . . . . .  	TEXT  0		
@FILENAME  . . . . . . . . . . .  	TEXT  ALU		


    410 Source  Lines
    410 Total   Lines
     52 Symbols

  50402 + 449758 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
