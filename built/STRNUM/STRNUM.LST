Microsoft (R) Macro Assembler Version 5.00                  8/17/23 11:56:25
                                                             Page     1-1


       1				.MODEL COMPACT 
       2 0064				.STACK 100 
       3 0000				.DATA 
       4				 
       5 0000  34 30 32 35 37 35 37	strNum1             DB  "40257576" 
       6       36			
       7 0008  24			                    DB  "$" 
       8				 
       9 0009  32 32 38 33 32 35 32	strNum2             DB  "22832525" 
      10       35			
      11 0011  24			                    DB  "$" 
      12				 
      13 0012  ??			maxStrLen           DB  ? 
      14				 
      15 0013  0032[			normal1             DB  50  DUP("$") 
      16	   24			
      17			 ]	
      18				
      19				 
      20 0045  0032[			normal2             DB  50  DUP("$") 
      21	   24			
      22			 ]	
      23				
      24				 
      25 0077  0032[			result              DB  50  DUP("$") 
      26	   24			
      27			 ]	
      28				
      29				 
      30 0000				.CODE 
      31 0000				MAIN            PROC 
      32				 
      33 0000  B8 ---- R		mov ax,@data 
      34 0003  8E D8			mov ds,ax 
      35 0005  B8 4C00			mov ax,4c00h 
      36				 
      37				; start 
      38				 
      39 0008  8D 16 0000 R		lea         dx,strNum1 
      40 000C  E8 01A5 R		call        PRINT_STR 
      41 000F  E8 01DA R		call        NEWLINE 
      42				 
      43 0012  8D 16 0009 R		lea         dx,strNum2 
      44 0016  E8 01A5 R		call        PRINT_STR 
      45 0019  E8 01DA R		call        NEWLINE 
      46 001C  E8 01DA R		call        NEWLINE 
      47				 
      48				 
      49				 
      50 001F  8D 36 0000 R		lea         si,strNum1 
      51 0023  8D 3E 0009 R		lea         di,strNum2 
      52 0027  E8 00CD R		call        MUL_STRNUM 
      53				 
      54 002A  8D 16 0077 R		lea         dx,result 
Microsoft (R) Macro Assembler Version 5.00                  8/17/23 11:56:25
                                                             Page     1-2


      55 002E  E8 01A5 R		call        PRINT_STR 
      56				 
      57				;end 
      58				 
      59 0031  B4 4C			mov ah,4ch 
      60 0033  CD 21			int 21h 
      61				 
      62 0035				MAIN            ENDP 
      63				 
      64 0035				ADD_STRNUM      PROC                   
					                         ;output result
					 to result 
      65 0035  33 C0			                        xor         ax,
					ax 
      66				 
      67				                        ; ;remove decim
					als from si, di strings 
      68				                        ; push        d
					i                      ;normalise si st
					ring 
      69				                        ; lea         d
					i,normal1 
      70				                        ; call        N
					ORMALISE_STR 
      71				                        ; mov         s
					i,di 
      72				                        ; pop         d
					i 
      73				 
      74				                        ; push        s
					i                      ;normalise di st
					ring 
      75				                        ; mov         s
					i,di 
      76				                        ; lea         d
					i,normal2 
      77				                        ; call        N
					ORMALISE_STR 
      78				                        ; pop         s
					i 
      79				 
      80				                        ;get the length
					 of the longer string 
      81 0037  E8 0174 R		                        call        STR
					LEN                  ;length of si 
      82 003A  50			                        push        ax 
					                   
      83				 
      84 003B  56			                        push        si 
					          
      85 003C  8B F7			                        mov         si,
					di 
      86 003E  E8 0174 R		                        call        STR
					LEN                  ;length of di 
Microsoft (R) Macro Assembler Version 5.00                  8/17/23 11:56:25
                                                             Page     1-3


      87 0041  5E			                        pop         si 
      88				 
      89 0042  5B			                        pop         bx 
      90 0043  E8 01D0 R		                        call        LAR
					GER_NUM              ;larger number in 
					ax,bx will be in ax 
      91 0046  8B C8			                        mov         cx,
					ax                   ;longest length of
					 si and di will be in CX 
      92				 
      93				                        ;offset si,di 
      94 0048  03 F1			                        add         si,
					cx                   ;move to last char
					acter 
      95 004A  4E			                        dec         si 
      96 004B  03 F9			                        add         di,
					cx 
      97 004D  4F			                        dec         di 
      98				                         
      99 004E  33 DB			                        xor         bx,
					bx                   ;prepare bx for us
					e as carry register 
     100 0050				                        add_loop: 
     101 0050  8A 04			                                    mov
					         al,[si]     ;get int value of 
					strin             ; *POINTER      lea o
					ffset &inte 
     102 0052  2C 30			                                    sub
					         al,48d 
     103				                                       
					  
     104 0054  8A 25			                                    mov
					         ah,[di]     ;get int value of 
					string 
     105 0056  80 EC 30			                                    sub
					         ah,48d 
     106				 
     107 0059  02 C3			                                    add
					         al,bl       ;add carry 
     108 005B  02 C4			                                    add
					         al,ah 
     109				 
     110 005D  32 DB			                                    xor
					         bl,bl       ;reset carry flag 
     111				 
     112 005F  3C 09			                                    cmp
					         al,9d       ;if al larger than
					 9, overflow, carry register bl set 
     113 0061  77 03			                                    ja 
					         add_overflow 
     114 0063  EB 05 90			                                    jmp
					         add_no_overflow 
     115				 
     116 0066				                                    add
Microsoft (R) Macro Assembler Version 5.00                  8/17/23 11:56:25
                                                             Page     1-4


					_overflow: 
     117 0066  2C 0A			                                       
					         sub         al,10d 
     118 0068  B3 01			                                       
					         mov         bl,1d       ;set c
					arry register 
     119				                                     
     120 006A				                                    add
					_no_overflow: 
     121 006A  B4 00			                                    mov
					         ah,0 
     122 006C  04 30			                                    add
					         al, 48d 
     123				 
     124 006E  88 04			                                    mov
					         [si],al 
     125				 
     126 0070  4E			                                    dec
					         si 
     127 0071  4F			                                    dec
					         di 
     128				 
     129 0072  57			                                    pus
					h        di          ;load into result 
     130				 
     131 0073  8D 3E 0077 R		                                    lea
					         di,result   ;di is address of 
					result 
     132 0077  03 F9			                                    add
					         di,cx       ;offset to cx + 1 
     133 0079  4F			                                    dec
					         di 
     134 007A  88 05			                                    mov
					         [di],al     ;insert in di 
     135				 
     136 007C  5F			                                    pop
					         di 
     137				 
     138 007D  E2 D1			                                    loo
					p        add_loop 
     139 007F  C3			                        ret 
     140 0080				ADD_STRNUM      ENDP 
     141				 
     142 0080				SUB_STRNUM      PROC                   
					                         ;output result
					 to result 
     143				                        ;get the length
					 of the longer string 
     144 0080  E8 0174 R		                        call        STR
					LEN                  ;length of si 
     145 0083  50			                        push        ax 
					                   
     146				 
     147 0084  56			                        push        si 
Microsoft (R) Macro Assembler Version 5.00                  8/17/23 11:56:25
                                                             Page     1-5


					          
     148 0085  8B F7			                        mov         si,
					di 
     149 0087  E8 0174 R		                        call        STR
					LEN                  ;length of di 
     150 008A  5E			                        pop         si 
     151				 
     152 008B  5B			                        pop         bx 
     153 008C  E8 01D0 R		                        call        LAR
					GER_NUM              ;larger number in 
					ax,bx will be in ax 
     154 008F  8B C8			                        mov         cx,
					ax                   ;longest length of
					 si and di will be in CX 
     155				 
     156				                        ;offset si,di 
     157 0091  03 F1			                        add         si,
					cx                   ;move to last char
					acter 
     158 0093  4E			                        dec         si 
     159 0094  03 F9			                        add         di,
					cx 
     160 0096  4F			                        dec         di 
     161				 
     162 0097  33 DB			                        xor         bx,
					bx 
     163				 
     164 0099				                        sub_loop: 
     165 0099  8A 04			                                    mov
					         al,[si] 
     166 009B  2C 30			                                    sub
					         al,48d 
     167				 
     168 009D  8A 25			                                    mov
					         ah,[di] 
     169 009F  80 EC 30			                                    sub
					         ah,48d 
     170				 
     171 00A2  2A C3			                                    sub
					         al,bl 
     172 00A4  32 DB			                                    xor
					         bl,bl 
     173 00A6  2A C4			                                    sub
					         al,ah 
     174 00A8  78 03			                                    js 
					         sub_underflow   ;if underflow 
     175 00AA  EB 0B 90			                                    jmp
					         sub_no_underflow 
     176				 
     177 00AD				                                    sub
					_underflow: 
     178 00AD  F6 D8			                                       
					         neg         al 
     179 00AF  B4 0A			                                       
Microsoft (R) Macro Assembler Version 5.00                  8/17/23 11:56:25
                                                             Page     1-6


					         mov         ah,10d 
     180 00B1  2A E0			                                       
					         sub         ah,al 
     181 00B3  8A C4			                                       
					         mov         al,ah 
     182 00B5  B3 01			                                       
					         mov         bl,1          
     183 00B7				                        sub_no_underflo
					w: 
     184 00B7  B4 00			                                    mov
					         ah,0 
     185 00B9  04 30			                                    add
					         al, 48d 
     186				 
     187 00BB  88 04			                                    mov
					         [si],al 
     188				 
     189 00BD  4E			                                    dec
					         si 
     190 00BE  4F			                                    dec
					         di 
     191				 
     192 00BF  57			                                    pus
					h        di          ;load into result 
     193				 
     194 00C0  8D 3E 0077 R		                                    lea
					         di,result   ;di is address of 
					result 
     195 00C4  03 F9			                                    add
					         di,cx       ;offset to cx + 1 
     196 00C6  4F			                                    dec
					         di 
     197 00C7  88 05			                                    mov
					         [di],al     ;insert in di 
     198				 
     199 00C9  5F			                                    pop
					         di 
     200				 
     201 00CA  E2 CD			                                    loo
					p        sub_loop  
     202 00CC  C3			                        ret 
     203 00CD				SUB_STRNUM      ENDP 
     204				 
     205 00CD				MUL_STRNUM      PROC 
     206				                        ;get the length
					 of the longer string 
     207 00CD  E8 0174 R		                        call        STR
					LEN                  ;length of si 
     208 00D0  50			                        push        ax 
					                   
     209				 
     210 00D1  56			                        push        si 
					          
     211 00D2  8B F7			                        mov         si,
Microsoft (R) Macro Assembler Version 5.00                  8/17/23 11:56:25
                                                             Page     1-7


					di 
     212 00D4  E8 0174 R		                        call        STR
					LEN                  ;length of di 
     213 00D7  5E			                        pop         si 
     214				 
     215 00D8  5B			                        pop         bx 
     216 00D9  E8 01D0 R		                        call        LAR
					GER_NUM              ;larger number in 
					ax,bx will be in ax 
     217 00DC  8B C8			                        mov         cx,
					ax                   ;longest length of
					 si and di will be in CX 
     218				 
     219				                        ; ;offset si,di
					 
     220				                        ; add         s
					i,cx                   ;move to last ch
					aracter 
     221 00DE  4E			                        dec         si 
     222				                        ; add         d
					i,cx 
     223 00DF  4F			                        dec         di 
     224				 
     225 00E0  8B D9			                        mov         bx,
					cx                   ;cx as i, bx as j,
					 both begins at end of number 
     226 00E2  88 0E 0012 R		                        mov         [ma
					xStrLen],cl 
     227 00E6  33 C0			                        xor         ax,
					ax 
     228 00E8				                        mul_loop_j:    
					                     ;multiply numbers 
					for j = n; j > 0; j--;; i = n; i > 0; i
					-- 
     229				                                       
					                     ;anchor al 
     230 00E8  57			                                    pus
					h        di 
     231 00E9  03 FB			                                    add
					         di,bx       ;di[bx] 
     232 00EB  8A 05			                                    mov
					         al,[di]     ;load number from 
					second number to al 
     233 00ED  2C 30			                                    sub
					         al,48d 
     234 00EF  5F			                                    pop
					         di 
     235				 
     236 00F0  51			                                    pus
					h        cx 
     237				 
     238 00F1  33 D2			                                    xor
					         dx,dx 
     239 00F3				                                    mul
Microsoft (R) Macro Assembler Version 5.00                  8/17/23 11:56:25
                                                             Page     1-8


					_loop_i: 
     240 00F3  56			                                       
					         push        si 
     241 00F4  03 F1			                                       
					         add         si,cx             
					  ;si[cx] 
     242 00F6  8A 24			                                       
					         mov         ah,[si]           
					  ;load first number from si to ah 
     243 00F8  80 EC 30			                                       
					         sub         ah,48d 
     244 00FB  5E			                                       
					         pop         si 
     245				 
     246 00FC  50			                                       
					         push        ax 
     247 00FD  F6 E4			                                       
					         mul         ah                
					  ;al x ah result will be in ax 
     248 00FF  03 C2			                                       
					         add         ax,dx             
					  ;add carry to multiplication result 
     249 0101  33 D2			                                       
					         xor         dx,dx 
     250				 
     251				                                       
					         ; push        ax 
     252				                                       
					         ; mov         ah,0 
     253				                                       
					         ; call        PRINT_NUM 
     254				                                       
					         ; call        NEWLINE 
     255				                                       
					         ; pop         ax 
     256				 
     257 0103  3D 0009			                                       
					         cmp         ax,9d             
					  ;if ax is more than 9, overflow 
     258 0106  77 03			                                       
					         ja          mul_overflow      
					   
     259 0108  EB 0C 90			                                       
					         jmp         mul_no_overflow 
     260				 
     261 010B				                                       
					         mul_overflow: 
     262 010B  53			                                       
					                     push        bx 
     263 010C  BB 000A			                                       
					                     mov         bx,10d
					  ;divide ax by 10 
     264				 
     265 010F  F7 F3			                                       
Microsoft (R) Macro Assembler Version 5.00                  8/17/23 11:56:25
                                                             Page     1-9


					                     div         bx    
					  ;quotient ax will be the carry, remai
					nder will be th
     266				 
     267 0111  5B			                                       
					                     pop         bx 
     268 0112  52			                                       
					                     push        dx    
					  ;exchange value of ax,dx 
     269 0113  8B D0			                                       
					                     mov         dx,ax 
					   
     270 0115  58			                                       
					                     pop         ax    
					  ;resulting value will be in lower reg
					ister 
     271				 
     272 0116				                                       
					         mul_no_overflow: 
     273				                                       
					         ;store output in result 
     274 0116  57			                                       
					         push        di 
     275 0117  8D 3E 0077 R		                                       
					         lea         di,result 
     276				 
     277 011B  51			                                       
					         push        cx                
					  ;set offset max-i + max-j to result a
					ddress 
     278 011C  53			                                       
					         push        bx 
     279 011D  33 DB			                                       
					         xor         bx,bx 
     280 011F  8A 1E 0012 R		                                       
					         mov         bl,[maxStrLen] 
     281 0123  2A D9			                                       
					         sub         bl,cl 
     282 0125  03 FB			                                       
					         add         di,bx 
     283 0127  5B			                                       
					         pop         bx 
     284 0128  59			                                       
					         pop         cx 
     285				 
     286 0129  51			                                       
					         push        cx                
					   
     287 012A  53			                                       
					         push        bx 
     288 012B  33 C9			                                       
					         xor         cx,cx 
     289 012D  8A 0E 0012 R		                                       
					         mov         cl,[maxStrLen]    
Microsoft (R) Macro Assembler Version 5.00                  8/17/23 11:56:25
                                                             Page     1-10


					   
     290 0131  2A CB			                                       
					         sub         cl,bl 
     291 0133  03 F9			                                       
					         add         di,cl 
ASMFiles\A\STRNUM.asm(280): warning A4031: Operand types must match
     292 0135  5B			                                       
					         pop         bx 
     293 0136  59			                                       
					         pop         cx 
     294				 
     295 0137  8A 25			                                       
					         mov         ah,[di] 
     296 0139  80 FC 24			                                       
					         cmp         ah,"$"          ;i
					f character is $ set it to zero 
     297 013C  74 03			                                       
					         je          mul_set_zero 
     298 013E  EB 03 90			                                       
					         jmp         mul_no_set_zero 
     299				 
     300 0141				                                       
					         mul_set_zero: 
     301 0141  B4 30			                                       
					                     mov         ah  ,"
					0" 
     302				 
     303 0143				                                       
					         mul_no_set_zero: 
     304 0143  80 EC 30			                                       
					         sub         ah,48d 
     305 0146  02 C4			                                       
					         add         al,ah           ;a
					dd to previous value in result[i+j] 
     306				 
     307 0148  3C 09			                                       
					         cmp         al,9d             
					  ;if al is more than 9, overflow 
     308 014A  77 07			                                       
					         ja          mul_overflow2 
     309 014C  EB 15 90			                                       
					         jmp         mul_no_overflow2 
     310				 
     311				                                       
					         ;i loop checkpoint 
     312 014F				                                       
					         mul_loop_i_checkpoint: 
     313 014F  EB A2			                                       
					         jmp         mul_loop_i 
     314				 
     315				                                       
					         ;j loop checkpoint 
     316 0151				                                       
					         mul_loop_j_checkpoint: 
Microsoft (R) Macro Assembler Version 5.00                  8/17/23 11:56:25
                                                             Page     1-11


     317 0151  EB 95			                                       
					         jmp         mul_loop_j 
     318				 
     319 0153				                                       
					         mul_overflow2: 
     320 0153  2C 0A			                                       
					                     sub         al,10d
					 
     321				 
     322 0155  47			                                       
					                     inc         di 
     323 0156  50			                                       
					                     push        ax 
     324				 
     325 0157  8A 25			                                       
					                     mov         ah,[di
					] 
     326				                                       
					                     ; cmp         ah,"
					$"      ;if new digit does not exist ye
					t 
     327				                                       
					                     ; je          mul_
					overflow2_new 
     328				                                       
					                     ; jmp         mul_
					overflow2_no_new 
     329				 
     330				                                       
					                     ; mul_overflow2_ne
					w: 
     331				                                       
					                     ;             mov 
					    ah,"1" 
     332				                                       
					                     ;             mov 
					    [di],ah     ;move to next digit, do
					nt add 
     333				 
     334				                                       
					                     ; call        PRIN
					T_RESULT 
     335				                                       
					                     ; call        NEWL
					INE 
     336				 
     337				                                       
					                     ;             jmp 
					    mul_overflow2_new_end 
     338				 
     339 0159				                                       
					                     mul_overflow2_no_n
					ew: 
     340 0159  80 C4 01			                                       
Microsoft (R) Macro Assembler Version 5.00                  8/17/23 11:56:25
                                                             Page     1-12


					                                 add   
					  ah,1 
     341 015C  88 25			                                       
					                                 mov   
					  [di],ah 
     342 015E  EB 01 90			                                       
					                                 jmp   
					  mul_overflow2_new_end 
     343				 
     344 0161				                                       
					                     mul_overflow2_new_
					end: 
     345				 
     346				 
     347				 
     348 0161  4F			                                       
					                     dec         di 
     349 0162  58			                                       
					                     pop         ax 
     350				 
     351 0163				                                       
					         mul_no_overflow2: 
     352 0163  04 30			                                       
					         add         al,48d 
     353 0165  88 05			                                       
					         mov         [di],al 
     354				 
     355 0167  32 E4			                                       
					         xor         ah,ah 
     356				 
     357				                                       
					         ; cmp         cx,1 
     358				                                       
					         ; je          last_loop 
     359				                                       
					         ; jmp         not_last_loop 
     360				                                       
					          
     361				                                       
					         ; last_loop: 
     362				                                       
					         ;             inc         di 
     363				                                       
					         ;             add         dl,4
					8d 
     364				                                       
					         ;             mov         [di]
					,dl         ;move last remainder to lar
					gest place  
     365				                                       
					         ;             sub         dl,4
					8d 
     366				                                       
					         ;             dec         di 
Microsoft (R) Macro Assembler Version 5.00                  8/17/23 11:56:25
                                                             Page     1-13


     367				 
     368 0169				                                       
					         not_last_loop: 
     369				 
     370 0169  5F			                                       
					         pop         di 
     371 016A  58			                                       
					         pop         ax 
     372 016B  E2 E2			                                       
					         loop        mul_loop_i_checkpo
					int                  ;use cx(i) to loop
					 
     373				 
     374 016D  59			                                    pop
					         cx 
     375				 
     376 016E  4B			                                    dec
					         bx 
     377 016F  83 FB 00			                                    cmp
					         bx,0 
     378 0172  77 DD			                                    ja 
					         mul_loop_j_checkpoint 
     379 0174				MUL_STRNUM      ENDP 
     380				 
     381 0174				STRLEN          PROC                   
					                     ;output length of 
					si in ax 
     382 0174  56			                        push        si 
     383 0175  33 D2			                        xor         dx,
					dx 
     384 0177  33 DB			                        xor         bx,
					bx 
     385 0179  33 C0			                        xor         ax,
					ax 
     386				 
     387 017B				                        strlenLoop: 
     388 017B  8A 1C			                                    mov
					     bl,[si] 
     389 017D  80 FB 24			                                    cmp
					     bl,"$" 
     390 0180  74 04			                                    je 
					     strlenLoopEnd 
     391				 
     392 0182  46			                                    inc
					     si 
     393 0183  40			                                    inc
					     ax 
     394				 
     395 0184  EB F5			                                    jmp
					     strlenLoop 
     396				 
     397 0186				                        strlenLoopEnd: 
     398				 
     399 0186  5E			                        pop         si 
Microsoft (R) Macro Assembler Version 5.00                  8/17/23 11:56:25
                                                             Page     1-14


     400 0187  C3			                        ret 
     401 0188				STRLEN          ENDP 
     402				 
     403 0188				NORMALISE_STR   PROC                   
					                     ;output string num
					ber without decimal point from si to di
					 
     404 0188  56			                        push        si 
     405 0189  57			                        push        di 
     406 018A  33 C0			                        xor         ax,
					ax       ;al contains character 
     407 018C				                        normLoop: 
     408 018C  8A 04			                                    mov
					     al  ,[si] 
     409				                                     
     410 018E  3C 24			                                    cmp
					     al,"$"          ;if is string end 
     411 0190  74 10			                                    je 
					     normLoopEnd 
     412				 
     413 0192  3C 2E			                                    cmp
					     al,"." 
     414 0194  74 03			                                    je 
					     normRemoveDec   ;if is decimal poi
					nt 
     415 0196  EB 04 90			                                    jmp
					     normRemoveDecEnd 
     416				 
     417 0199				                                    nor
					mRemoveDec: 
     418 0199  46			                                       
					     inc         si 
     419 019A  8A 04			                                       
					     mov         al,[si] 
     420 019C				                                    nor
					mRemoveDecEnd: 
     421				 
     422 019C  88 05			                                    mov
					     [di],al 
     423				 
     424 019E  46			                                    inc
					     si 
     425 019F  47			                                    inc
					     di 
     426				                                     
     427 01A0  EB EA			                                    jmp
					      normLoop 
     428 01A2				                        normLoopEnd: 
     429 01A2  5F			                        pop         di 
     430 01A3  5E			                        pop         si 
     431 01A4  C3			                        ret 
     432 01A5				NORMALISE_STR   ENDP 
     433				 
     434 01A5				PRINT_STR       PROC                   
Microsoft (R) Macro Assembler Version 5.00                  8/17/23 11:56:25
                                                             Page     1-15


					                     ;print value from 
					address in dx 
     435 01A5  50			                        push        ax 
     436 01A6  B4 09			                        mov         ah,
					09h       
     437 01A8  CD 21			                        int 21h 
     438 01AA  58			                        pop         ax 
     439 01AB  C3			                        ret 
     440 01AC				PRINT_STR       ENDP 
     441				 
     442 01AC				PRINT_NUM       PROC                   
					                     ;print from ax    
					           
     443 01AC  50			                        push    ax     
					                     ;preserves origina
					l register values 
     444 01AD  53			                        push    bx 
     445 01AE  51			                        push    cx 
     446 01AF  52			                        push    dx 
     447 01B0  BB 000A			                        mov     bx,000A
					h         
     448 01B3  B9 0000			                        mov     cx,0000
					h 
     449 01B6				            Divloop: 
     450 01B6  BA 0000			                        mov     dx,0000
					h 
     451 01B9  F7 F3			                        div     bx 
     452 01BB  52			                        push    dx 
     453 01BC  41			                        inc     cx 
     454 01BD  85 C0			                        test    ax,ax 
     455 01BF  75 F5			                        jnz     Divloop
					 
     456				 
     457 01C1  B4 02			                        mov ah,02h     
					                     ;setup for print 
     458				 
     459 01C3				            IntPrint:    
     460 01C3  5A			                        pop     dx 
     461 01C4  83 C2 30			                        add     dx,48d 
     462 01C7  CD 21			                        int     21h 
     463 01C9  E2 F8			                        loop    IntPrin
					t 
     464				 
     465 01CB  5A			                        pop dx         
					                     ;restore original 
					ax value 
     466 01CC  59			                        pop cx 
     467 01CD  5B			                        pop bx 
     468 01CE  58			                        pop ax 
     469 01CF  C3			                        ret 
     470 01D0				PRINT_NUM       ENDP 
     471				 
     472 01D0				LARGER_NUM      PROC                   
					                     ;compare ax,bx, la
Microsoft (R) Macro Assembler Version 5.00                  8/17/23 11:56:25
                                                             Page     1-16


					rge number will be AX 
     473 01D0  3B C3			                        cmp     ax,bx 
     474 01D2  72 03			                        jb      AX_SMAL
					LER                   ;if ax is smaller
					 than bx 
     475 01D4  EB 03 90			                        jmp     AX_SMAL
					LER_END                
     476				 
     477 01D7				                        AX_SMALLER: 
     478 01D7  8B C3			                                    mov
					     ax,bx 
     479				 
     480 01D9				                        AX_SMALLER_END:
					 
     481 01D9  C3			                        ret 
     482 01DA				LARGER_NUM      ENDP 
     483				 
     484 01DA				NEWLINE         PROC 
     485 01DA  52			                            push    dx 
     486 01DB  B2 0A			                            mov     dl,
					0Ah 
     487 01DD  E8 01E2 R		                            call PRINT_
					CHAR 
     488 01E0  5A			                            pop     dx 
     489 01E1  C3			                            ret 
     490 01E2				NEWLINE         ENDP 
     491				 
     492 01E2				PRINT_CHAR      PROC                   
					                     ;print cjaracter o
					f value in dl 
     493 01E2  50			                            push    ax 
     494 01E3  B4 02			                            mov     ah,
					02h 
     495 01E5  CD 21			                            int     21h
					 
     496 01E7  58			                            pop     ax 
     497 01E8  C3			                            ret 
     498 01E9				PRINT_CHAR      ENDP 
     499				 
     500 01E9				PRINT_RESULT    PROC 
     501 01E9  51			                            push       
					 cx 
     502 01EA  52			                            push       
					 dx 
     503 01EB  57			                            push       
					 di 
     504 01EC  B9 0014			                            mov        
					 cx,20d 
     505 01EF  8D 3E 0077 R		                            lea        
					 di,result 
     506 01F3				                            loopF: 
     507 01F3  33 D2			                                       
					 xor dx,dx 
     508 01F5  8A 15			                                       
Microsoft (R) Macro Assembler Version 5.00                  8/17/23 11:56:25
                                                             Page     1-17


					 mov dl,[di] 
     509 01F7  E8 01E2 R		                                       
					 call    PRINT_CHAR 
     510 01FA  47			                                       
					 inc di 
     511 01FB  E2 F6			                                       
					 loop loopF 
     512 01FD  5F			                            pop        
					 di 
     513 01FE  5A			                            pop        
					 dx 
     514 01FF  59			                            pop        
					 cx 
     515				 
     516 0200  C3			                            ret 
     517 0201				PRINT_RESULT    ENDP 
     518				 
     519 0201				END MAIN 
Microsoft (R) Macro Assembler Version 5.00                  8/17/23 11:56:25
                                                             Symbols-1


Segments and Groups:

                N a m e         	Length	 Align	Combine Class

DGROUP . . . . . . . . . . . . .  	GROUP
  _DATA  . . . . . . . . . . . .  	00A9	WORD	PUBLIC	'DATA'
  STACK  . . . . . . . . . . . .  	0064	PARA	STACK	'STACK'
_TEXT  . . . . . . . . . . . . .  	0201	WORD	PUBLIC	'CODE'

Symbols:            

                N a m e         	Type	 Value	 Attr

ADD_LOOP . . . . . . . . . . . .  	L NEAR	0050	_TEXT
ADD_NO_OVERFLOW  . . . . . . . .  	L NEAR	006A	_TEXT
ADD_OVERFLOW . . . . . . . . . .  	L NEAR	0066	_TEXT
ADD_STRNUM . . . . . . . . . . .  	N PROC	0035	_TEXT	Length = 004B
AX_SMALLER . . . . . . . . . . .  	L NEAR	01D7	_TEXT
AX_SMALLER_END . . . . . . . . .  	L NEAR	01D9	_TEXT

DIVLOOP  . . . . . . . . . . . .  	L NEAR	01B6	_TEXT

INTPRINT . . . . . . . . . . . .  	L NEAR	01C3	_TEXT

LARGER_NUM . . . . . . . . . . .  	N PROC	01D0	_TEXT	Length = 000A
LOOPF  . . . . . . . . . . . . .  	L NEAR	01F3	_TEXT

MAIN . . . . . . . . . . . . . .  	N PROC	0000	_TEXT	Length = 0035
MAXSTRLEN  . . . . . . . . . . .  	L BYTE	0012	_DATA
MUL_LOOP_I . . . . . . . . . . .  	L NEAR	00F3	_TEXT
MUL_LOOP_I_CHECKPOINT  . . . . .  	L NEAR	014F	_TEXT
MUL_LOOP_J . . . . . . . . . . .  	L NEAR	00E8	_TEXT
MUL_LOOP_J_CHECKPOINT  . . . . .  	L NEAR	0151	_TEXT
MUL_NO_OVERFLOW  . . . . . . . .  	L NEAR	0116	_TEXT
MUL_NO_OVERFLOW2 . . . . . . . .  	L NEAR	0163	_TEXT
MUL_NO_SET_ZERO  . . . . . . . .  	L NEAR	0143	_TEXT
MUL_OVERFLOW . . . . . . . . . .  	L NEAR	010B	_TEXT
MUL_OVERFLOW2  . . . . . . . . .  	L NEAR	0153	_TEXT
MUL_OVERFLOW2_NEW_END  . . . . .  	L NEAR	0161	_TEXT
MUL_OVERFLOW2_NO_NEW . . . . . .  	L NEAR	0159	_TEXT
MUL_SET_ZERO . . . . . . . . . .  	L NEAR	0141	_TEXT
MUL_STRNUM . . . . . . . . . . .  	N PROC	00CD	_TEXT	Length = 00A7

NEWLINE  . . . . . . . . . . . .  	N PROC	01DA	_TEXT	Length = 0008
NORMAL1  . . . . . . . . . . . .  	L BYTE	0013	_DATA	Length = 0032
NORMAL2  . . . . . . . . . . . .  	L BYTE	0045	_DATA	Length = 0032
NORMALISE_STR  . . . . . . . . .  	N PROC	0188	_TEXT	Length = 001D
NORMLOOP . . . . . . . . . . . .  	L NEAR	018C	_TEXT
NORMLOOPEND  . . . . . . . . . .  	L NEAR	01A2	_TEXT
NORMREMOVEDEC  . . . . . . . . .  	L NEAR	0199	_TEXT
NORMREMOVEDECEND . . . . . . . .  	L NEAR	019C	_TEXT
NOT_LAST_LOOP  . . . . . . . . .  	L NEAR	0169	_TEXT

PRINT_CHAR . . . . . . . . . . .  	N PROC	01E2	_TEXT	Length = 0007
Microsoft (R) Macro Assembler Version 5.00                  8/17/23 11:56:25
                                                             Symbols-2


PRINT_NUM  . . . . . . . . . . .  	N PROC	01AC	_TEXT	Length = 0024
PRINT_RESULT . . . . . . . . . .  	N PROC	01E9	_TEXT	Length = 0018
PRINT_STR  . . . . . . . . . . .  	N PROC	01A5	_TEXT	Length = 0007

RESULT . . . . . . . . . . . . .  	L BYTE	0077	_DATA	Length = 0032

STRLEN . . . . . . . . . . . . .  	N PROC	0174	_TEXT	Length = 0014
STRLENLOOP . . . . . . . . . . .  	L NEAR	017B	_TEXT
STRLENLOOPEND  . . . . . . . . .  	L NEAR	0186	_TEXT
STRNUM1  . . . . . . . . . . . .  	L BYTE	0000	_DATA
STRNUM2  . . . . . . . . . . . .  	L BYTE	0009	_DATA
SUB_LOOP . . . . . . . . . . . .  	L NEAR	0099	_TEXT
SUB_NO_UNDERFLOW . . . . . . . .  	L NEAR	00B7	_TEXT
SUB_STRNUM . . . . . . . . . . .  	N PROC	0080	_TEXT	Length = 004D
SUB_UNDERFLOW  . . . . . . . . .  	L NEAR	00AD	_TEXT

@CODE  . . . . . . . . . . . . .  	TEXT  _TEXT		
@CODESIZE  . . . . . . . . . . .  	TEXT  0		
@DATASIZE  . . . . . . . . . . .  	TEXT  1		
@FILENAME  . . . . . . . . . . .  	TEXT  STRNUM		


    508 Source  Lines
    508 Total   Lines
     62 Symbols

  50434 + 416958 Bytes symbol space free

      1 Warning Errors
      0 Severe  Errors
